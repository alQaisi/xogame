{"version":3,"sources":["Component/Square.js","Component/Squares.js","constants.js","Containers/App.js","actions.js","reducers.js","serviceWorker.js","index.js"],"names":["Square","props","className","onClick","Winner","undefined","onSqClick","bind","number","digitOfSquare","Squares","numberOfSquare","map","item","actionsType","App","this","winnerClass","ON_Click","ON_RESTART","style","border","borderRadius","marginTop","fontSize","Component","connect","state","activePlayer","playerX","playerO","dispatch","player","type","payload","ONClick","initialState","gameState","checkWinner","switchFunc","array","includes","Object","assign","length","sort","i","ON_CLICK","sqNumber","push","rootReducer","action","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","store","createStore","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6d43d162.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Square.css\";\r\nconst Square=(props)=>{\r\n    \r\n    return(\r\n        <div className=\"square tc pa4\" onClick={\r\n            props.Winner?undefined:props.onSqClick.bind(this,props.number)\r\n        }>\r\n                <h1>{props.digitOfSquare[props.number]}</h1>\r\n        </div>\r\n    );\r\n}\r\nexport default Square;","import React from 'react';\r\nimport \"./Square.css\";\r\nimport \"./Square\";\r\nimport Square from './Square';\r\n\r\nconst Squares=({numberOfSquare,onSqClick,digitOfSquare,Winner})=>{\r\n    \r\n    return(\r\n        <div className=\"squaresContainer\">\r\n            {numberOfSquare.map(item=><Square key={item} onSqClick={onSqClick} number={item} digitOfSquare={digitOfSquare} Winner={Winner}/>)}\r\n        </div>\r\n    );\r\n}\r\nexport default Squares;","export const actionsType={\r\n    ON_CLICK:'ON_CLICK',\r\n    ON_RESTART:\"ON_RESTART\"\r\n}","import React,{Component} from 'react';\r\nimport './App.css';\r\nimport \"../Component/Square\";\r\nimport Squares from '../Component/Squares';\r\nimport {connect} from 'react-redux';\r\nimport {ONClick,ONRESTART} from '../actions';\r\nconst mapStateToProps=state=>({\r\n    numberOfSquare:state.numberOfSquare,\r\n    digitOfSquare:state.digitOfSquare,\r\n    activePlayer:state.activePlayer,\r\n    playerX:state.playerX,\r\n    playerO:state.playerO,\r\n    Winner:state.Winner,\r\n    winnerClass:state.winnerClass\r\n});\r\nconst mapDispatchToProps=dispatch=>({\r\n    ON_Click:(player)=>dispatch(ONClick(player)),\r\n    ON_RESTART:()=>dispatch(ONRESTART())\r\n})\r\nclass App extends Component{\r\n  render(){\r\n    const {digitOfSquare,numberOfSquare,winnerClass,Winner}=this.props;\r\n    const {ON_Click,ON_RESTART}=this.props;\r\n    return(\r\n    <div className=\"contanier\">\r\n      <div>\r\n    <h1 className={winnerClass}>Winner is : {Winner}</h1>\r\n      <Squares numberOfSquare={numberOfSquare} digitOfSquare={digitOfSquare} onSqClick={ON_Click} Winner={Winner}/>\r\n      <div className=\"button\">\r\n      <button className=\"f4 link dim ph3 pv2 mb2 db white bg-blue\" style={{border:'5px',borderRadius:'25px',marginTop:'25px',fontSize:'30px'}} onClick={ON_RESTART} >restart</button>\r\n      </div>\r\n      </div> \r\n    </div>);\r\n  }\r\n}\r\nexport default  connect(mapStateToProps,mapDispatchToProps)(App);\r\n","import {actionsType} from './constants.js';\r\n\r\nexport const ONClick=(player)=>{\r\n    return{\r\n        type:actionsType.ON_CLICK,\r\n        payload:player\r\n    }\r\n}\r\nexport const ONRESTART=()=>({\r\n    type:actionsType.ON_RESTART,\r\n    payload:{\r\n        digitOfSquare:[undefined,undefined,undefined\r\n            ,undefined,undefined,undefined\r\n            ,undefined,undefined,undefined],\r\n        activePlayer:\"X\",\r\n        playerX:[],\r\n        playerO:[],\r\n        Winner:undefined,\r\n        winnerClass:\"winner tc\"\r\n    }\r\n})","import {actionsType} from './constants';\r\n\r\nconst initialState={\r\n    numberOfSquare:[0,1,2,3,4,5,6,7,8],\r\n    digitOfSquare:[undefined,undefined,undefined\r\n        ,undefined,undefined,undefined\r\n        ,undefined,undefined,undefined],\r\n    activePlayer:\"X\",\r\n    playerX:[],\r\n    playerO:[],\r\n    Winner:undefined,\r\n    winnerClass:\"winner tc\"\r\n};\r\nlet gameState={\r\n    numberOfSquare:[0,1,2,3,4,5,6,7,8],\r\n    digitOfSquare:[undefined,undefined,undefined\r\n        ,undefined,undefined,undefined\r\n        ,undefined,undefined,undefined],\r\n    activePlayer:\"X\",\r\n    playerX:[],\r\n    playerO:[],\r\n    Winner:undefined,\r\n    winnerClass:\"winner tc\"\r\n}\r\nconst checkWinner=()=>{\r\n    const switchFunc=(item,array,player)=>{\r\n      switch(true){\r\n        case item===2:\r\n          if(array.includes(1) && array.includes(0))\r\n              Object.assign(gameState,{Winner:player,winnerClass:\"winner tc winnerClass\"});\r\n          break;\r\n        case item===5:\r\n          if(array.includes(3) && array.includes(4))\r\n              Object.assign(gameState,{Winner:player,winnerClass:\"winner tc winnerClass\"});\r\n          break;\r\n        case item===6:\r\n          if((array.includes(3) && array.includes(0)) || (array.includes(4) && array.includes(2)))\r\n              Object.assign(gameState,{Winner:player,winnerClass:\"winner tc winnerClass\"});\r\n          break;\r\n        case item===7:\r\n          if(array.includes(4) && array.includes(1))\r\n              Object.assign(gameState,{Winner:player,winnerClass:\"winner tc winnerClass\"});\r\n          break;\r\n        case item===8:\r\n          if((array.includes(4) && array.includes(0)) || (array.includes(6) && array.includes(7)) ||(array.includes(5) && array.includes(2)))\r\n              Object.assign(gameState,{Winner:player,winnerClass:\"winner tc winnerClass\"});\r\n          break;\r\n        default:;\r\n      }\r\n    }\r\n    if(gameState.activePlayer===\"O\"){\r\n      let {playerO}=gameState;\r\n      if(gameState.playerO.length>=3){\r\n        playerO=playerO.sort();\r\n        for(let i=0;i<playerO.length-2;i++){\r\n          let itemO=playerO[playerO.length-(i+1)];\r\n        switchFunc(itemO,playerO,\"O\");\r\n        }\r\n        \r\n      }\r\n    }else if(gameState.activePlayer===\"X\"){\r\n      let {playerX}=gameState;\r\n      playerX=playerX.sort();\r\n      for(let i=0;i<playerX.length-2;i++){\r\n        let itemX=playerX[playerX.length-(i+1)];\r\n      switchFunc(itemX,playerX,\"X\");\r\n      }\r\n    }\r\n  }\r\nconst ON_CLICK=sqNumber=>{ \r\n    if (gameState.digitOfSquare[sqNumber]===undefined && initialState.Winner===undefined){\r\n        if(gameState.activePlayer===\"X\"){\r\n            gameState.playerX.push(sqNumber);\r\n            gameState.digitOfSquare[sqNumber]=\"X\";\r\n            if(gameState.playerX.length>=2)\r\n                checkWinner();\r\n            gameState.activePlayer=\"O\";\r\n        }else{\r\n            gameState.playerO.push(sqNumber);\r\n            gameState.digitOfSquare[sqNumber]=\"O\";\r\n            if(gameState.playerO.length>=2)\r\n                checkWinner();\r\n                gameState.activePlayer='X';\r\n        }\r\n    }\r\n    Object.assign(gameState,checkWinner());\r\n}\r\nconst rootReducer=(state=initialState,action={})=>{\r\n    switch(action.type){\r\n        case actionsType.ON_CLICK:\r\n            ON_CLICK(action.payload);\r\n            return Object.assign({},gameState);\r\n        case actionsType.ON_RESTART:\r\n            //gameState=state\r\n            Object.assign(gameState,action.payload);\r\n            return initialState;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\nexport default rootReducer;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './Containers/App';\r\nimport 'tachyons';\r\nimport {Provider} from 'react-redux';\r\nimport {createStore,applyMiddleware} from 'redux';\r\n// import {createLogger} from 'redux-logger'\r\nimport rootReducer from './reducers';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n// const logger=createLogger();\r\n// const store=createStore(rootReducer,applyMiddleware(logger));\r\nconst store=createStore(rootReducer);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App/>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}