{"version":3,"sources":["Component/Square.js","Component/Squares.js","constants.js","Containers/App.js","actions.js","reducers.js","serviceWorker.js","index.js"],"names":["Square","props","className","onClick","onSqClick","bind","number","digitOfSquare","Squares","numberOfSquare","map","item","key","actionsType","App","this","winnerClass","Winner","ON_Click","ON_RESTART","style","border","borderRadius","marginTop","fontSize","Component","connect","state","activePlayer","playerX","playerO","dispatch","player","type","payload","ONClick","undefined","initialState","gameState","checkWinner","switchFunc","array","includes","Object","assign","length","sort","i","ON_CLICK","sqNumber","push","rootReducer","action","Boolean","window","location","hostname","match","logger","createLogger","store","createStore","applyMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.689c7194.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Square.css\";\r\nconst Square=(props)=>{\r\n    \r\n    return(\r\n        <div className=\"square tc pa4\" onClick={props.onSqClick.bind(this,props.number)}>\r\n                <h1>{props.digitOfSquare[props.number]}</h1>\r\n        </div>\r\n    );\r\n}\r\nexport default Square;","import React from 'react';\r\nimport \"./Square.css\";\r\nimport \"./Square\";\r\nimport Square from './Square';\r\n\r\nconst Squares=({numberOfSquare,onSqClick,digitOfSquare})=>{\r\n    \r\n    return(\r\n        <div className=\"squaresContainer\">\r\n            {numberOfSquare.map(item=><Square key={item} onSqClick={onSqClick} number={item} digitOfSquare={digitOfSquare}/>)}\r\n        </div>\r\n    );\r\n}\r\nexport default Squares;","export const actionsType={\r\n    ON_CLICK:'ON_CLICK',\r\n    ON_RESTART:\"ON_RESTART\"\r\n}","import React,{Component} from 'react';\nimport './App.css';\nimport \"../Component/Square\";\nimport Squares from '../Component/Squares';\nimport {connect} from 'react-redux';\nimport {ONClick,ONRESTART} from '../actions';\nconst mapStateToProps=state=>({\n    numberOfSquare:state.numberOfSquare,\n    digitOfSquare:state.digitOfSquare,\n    activePlayer:state.activePlayer,\n    playerX:state.playerX,\n    playerO:state.playerO,\n    Winner:state.Winner,\n    winnerClass:state.winnerClass\n});\nconst mapDispatchToProps=dispatch=>({\n    ON_Click:(player)=>dispatch(ONClick(player)),\n    ON_RESTART:()=>dispatch(ONRESTART())\n})\nclass App extends Component{\n  render(){\n    const {digitOfSquare,numberOfSquare,winnerClass,Winner}=this.props;\n    const {ON_Click,ON_RESTART}=this.props;\n    return(\n    <div className=\"contanier\">\n      <div>\n    <h1 className={winnerClass}>Winner is : {Winner}</h1>\n      <Squares numberOfSquare={numberOfSquare} digitOfSquare={digitOfSquare} onSqClick={ON_Click}/>\n      <div className=\"button\">\n      <button className=\"f4 link dim ph3 pv2 mb2 db white bg-blue\" style={{border:'5px',borderRadius:'25px',marginTop:'25px',fontSize:'30px'}} onClick={ON_RESTART} >restart</button>\n      </div>\n      </div> \n    </div>);\n  }\n}\nexport default  connect(mapStateToProps,mapDispatchToProps)(App);\n","import {actionsType} from './constants.js';\r\n\r\nexport const ONClick=(player)=>{\r\n    return{\r\n        type:actionsType.ON_CLICK,\r\n        payload:player\r\n    }\r\n}\r\nexport const ONRESTART=()=>({\r\n    type:actionsType.ON_RESTART,\r\n    payload:{\r\n        digitOfSquare:[undefined,undefined,undefined\r\n            ,undefined,undefined,undefined\r\n            ,undefined,undefined,undefined],\r\n        activePlayer:\"X\",\r\n        playerX:[],\r\n        playerO:[],\r\n        Winner:undefined,\r\n        winnerClass:\"winner tc\"\r\n    }\r\n})","import {actionsType} from './constants';\r\n\r\nconst initialState={\r\n    numberOfSquare:[0,1,2,3,4,5,6,7,8],\r\n    digitOfSquare:[undefined,undefined,undefined\r\n        ,undefined,undefined,undefined\r\n        ,undefined,undefined,undefined],\r\n    activePlayer:\"X\",\r\n    playerX:[],\r\n    playerO:[],\r\n    Winner:undefined,\r\n    winnerClass:\"winner tc\"\r\n};\r\nlet gameState={\r\n    numberOfSquare:[0,1,2,3,4,5,6,7,8],\r\n    digitOfSquare:[undefined,undefined,undefined\r\n        ,undefined,undefined,undefined\r\n        ,undefined,undefined,undefined],\r\n    activePlayer:\"X\",\r\n    playerX:[],\r\n    playerO:[],\r\n    Winner:undefined,\r\n    winnerClass:\"winner tc\"\r\n}\r\nconst checkWinner=()=>{\r\n    const switchFunc=(item,array,player)=>{\r\n      switch(true){\r\n        case item===2:\r\n          if(array.includes(1) && array.includes(0))\r\n              Object.assign(gameState,{Winner:player,winnerClass:\"winner tc winnerClass\"});\r\n          break;\r\n        case item===5:\r\n          if(array.includes(3) && array.includes(4))\r\n              Object.assign(gameState,{Winner:player,winnerClass:\"winner tc winnerClass\"});\r\n          break;\r\n        case item===6:\r\n          if((array.includes(3) && array.includes(0)) || (array.includes(4) && array.includes(2)))\r\n              Object.assign(gameState,{Winner:player,winnerClass:\"winner tc winnerClass\"});\r\n          break;\r\n        case item===7:\r\n          if(array.includes(4) && array.includes(1))\r\n              Object.assign(gameState,{Winner:player,winnerClass:\"winner tc winnerClass\"});\r\n          break;\r\n        case item===8:\r\n          if((array.includes(4) && array.includes(0)) || (array.includes(6) && array.includes(7)) ||(array.includes(5) && array.includes(2)))\r\n              Object.assign(gameState,{Winner:player,winnerClass:\"winner tc winnerClass\"});\r\n          break;\r\n        default:;\r\n      }\r\n    }\r\n    if(gameState.activePlayer===\"O\"){\r\n      let {playerO}=gameState;\r\n      if(gameState.playerO.length>=3){\r\n        playerO=playerO.sort();\r\n        for(let i=0;i<playerO.length-2;i++){\r\n          let itemO=playerO[playerO.length-(i+1)];\r\n        switchFunc(itemO,playerO,\"O\");\r\n        }\r\n        \r\n      }\r\n    }else if(gameState.activePlayer===\"X\"){\r\n      let {playerX}=gameState;\r\n      playerX=playerX.sort();\r\n      for(let i=0;i<playerX.length-2;i++){\r\n        let itemX=playerX[playerX.length-(i+1)];\r\n      switchFunc(itemX,playerX,\"X\");\r\n      }\r\n    }\r\n  }\r\nconst ON_CLICK=sqNumber=>{ \r\n    if (gameState.digitOfSquare[sqNumber]===undefined && initialState.Winner===undefined){\r\n        if(gameState.activePlayer===\"X\"){\r\n            gameState.playerX.push(sqNumber);\r\n            gameState.digitOfSquare[sqNumber]=\"X\";\r\n            if(gameState.playerX.length>=2)\r\n                checkWinner();\r\n            gameState.activePlayer=\"O\";\r\n        }else{\r\n            gameState.playerO.push(sqNumber);\r\n            gameState.digitOfSquare[sqNumber]=\"O\";\r\n            if(gameState.playerO.length>=2)\r\n                checkWinner();\r\n                gameState.activePlayer='X';\r\n        }\r\n    }\r\n    Object.assign(gameState,checkWinner());\r\n}\r\nconst rootReducer=(state=initialState,action={})=>{\r\n    switch(action.type){\r\n        case actionsType.ON_CLICK:\r\n            ON_CLICK(action.payload);\r\n            return Object.assign({},gameState);\r\n        case actionsType.ON_RESTART:\r\n            //gameState=state\r\n            Object.assign(gameState,action.payload);\r\n            return initialState;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\nexport default rootReducer;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport 'tachyons';\nimport {Provider} from 'react-redux';\nimport {createStore,applyMiddleware} from 'redux';\nimport {createLogger} from 'redux-logger'\nimport rootReducer from './reducers';\nimport * as serviceWorker from './serviceWorker';\n\nconst logger=createLogger();\nconst store=createStore(rootReducer,applyMiddleware(logger));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}