{"version":3,"sources":["Component/Square.js","Component/Squares.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Square","props","className","onClick","onSqClick","bind","number","digitOfSquare","Squares","numberOfSquare","map","item","key","App","ReStart","setState","playerO","playerX","activePlayer","undefined","Winner","winnerClass","sqNumber","state","push","length","checkWinner","switchFunc","array","player","includes","this","sort","style","border","borderRadius","marginTop","fontSize","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d510847b.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Square.css\";\r\nconst Square=(props)=>{\r\n    \r\n    return(\r\n        <div className=\"square tc pa4\" onClick={props.onSqClick.bind(this,props.number)}>\r\n                <h1>{props.digitOfSquare[props.number]}</h1>\r\n        </div>\r\n    );\r\n}\r\nexport default Square;","import React from 'react';\r\nimport \"./Square.css\";\r\nimport \"./Square\";\r\nimport Square from './Square';\r\n\r\nconst Squares=({numberOfSquare,onSqClick,digitOfSquare})=>{\r\n    \r\n    return(\r\n        <div className=\"squaresContainer\">\r\n            {numberOfSquare.map(item=><Square key={item} onSqClick={onSqClick} number={item} digitOfSquare={digitOfSquare}/>)}\r\n        </div>\r\n    );\r\n}\r\nexport default Squares;","import React,{Component} from 'react';\nimport './App.css';\nimport \"../Component/Square\";\nimport Squares from '../Component/Squares';\nclass App extends Component{\n  constructor(){\n    super();\n    this.state={\n      numberOfSquare:[0,1,2,3,4,5,6,7,8],\n      digitOfSquare:[undefined,undefined,undefined\n        ,undefined,undefined,undefined\n        ,undefined,undefined,undefined],\n      activePlayer:\"X\",\n      playerX:[],\n      playerO:[],\n      Winner:undefined,\n      winnerClass:\"winner tc\"\n    }\n  }\n  ReStart=()=>{\n    this.setState({playerO:[]\n      ,playerX:[]\n      ,activePlayer:\"X\"\n      ,digitOfSquare:[undefined,undefined,undefined\n        ,undefined,undefined,undefined\n        ,undefined,undefined,undefined],\n      Winner:undefined,\n      winnerClass:\"winner tc\"\n  })\n  }\n  checkWinner(){\n    const switchFunc=(item,array,player)=>{\n      switch(true){\n        case item===2:\n          if(array.includes(1) && array.includes(0))\n              this.setState({Winner:player,winnerClass:\"winner tc winnerClass\"});\n          break;\n        case item===5:\n          if(array.includes(3) && array.includes(4))\n              this.setState({Winner:player,winnerClass:\"winner tc winnerClass\"});\n          break;\n        case item===6:\n          if((array.includes(3) && array.includes(0)) || (array.includes(4) && array.includes(2)))\n              this.setState({Winner:player,winnerClass:\"winner tc winnerClass\"});\n          break;\n        case item===7:\n          if(array.includes(4) && array.includes(1))\n              this.setState({Winner:player,winnerClass:\"winner tc winnerClass\"});\n          break;\n        case item===8:\n          if((array.includes(4) && array.includes(0)) || (array.includes(6) && array.includes(7)) ||(array.includes(5) && array.includes(2)))\n              this.setState({Winner:player,winnerClass:\"winner tc winnerClass\"});\n          break;\n        default:;\n      }\n    }\n    const {activePlayer}=this.state;\n    if(activePlayer===\"O\"){\n      let {playerO}=this.state;\n      if(playerO.length>=3){\n        playerO=playerO.sort();\n        let itemO=playerO[playerO.length-1];\n        switchFunc(itemO,playerO,\"O\");\n      }\n    }else{\n      let {playerX}=this.state;\n      playerX=playerX.sort();\n      let itemX=playerX[playerX.length-1];\n      switchFunc(itemX,playerX,\"X\");\n    }\n  }\n  onSqClick=(sqNumber)=>{\n    const {digitOfSquare,activePlayer,playerX,playerO}=this.state;\n    if(digitOfSquare[sqNumber]===undefined && this.state.Winner===undefined){\n      if (activePlayer===\"X\"){\n        this.setState({activePlayer:\"O\"});\n        playerX.push(sqNumber);\n        this.setState({playerX:playerX});\n        digitOfSquare[sqNumber]=\"X\";\n        if(playerX.length>=2)\n            this.checkWinner();\n      }else{\n        this.setState({activePlayer:\"X\"});\n        playerO.push(sqNumber);\n        this.setState({playerO:playerO});\n        digitOfSquare[sqNumber]=\"O\";\n        if(playerO.length>=2)\n            this.checkWinner();\n      }\n      this.setState({digitOfSquare:digitOfSquare});\n    }\n      \n  }\n  render(){\n    return(\n      \n    <div className=\"contanier\">\n      <div>\n    <h1 className={this.state.winnerClass}>Winner is : {this.state.Winner}</h1>\n      <Squares numberOfSquare={this.state.numberOfSquare} digitOfSquare={this.state.digitOfSquare} onSqClick={this.onSqClick}/>\n      <div className=\"button\">\n      <button className=\"f4 link dim ph3 pv2 mb2 db white bg-blue\" style={{border:'5px',borderRadius:'25px',marginTop:'25px',fontSize:'30px'}} onClick={this.ReStart} >restart</button>\n      </div>\n      \n      </div> \n    </div>);\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}